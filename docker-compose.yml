version: "3.8"

include:
  - onekey/compose.yaml


services:

  proxy:
    # proxy config template: https://github.com/tiangolo/full-stack-fastapi-postgresql/blob/master/src/docker-compose.yml
    image: traefik:v2.2
    privileged: true # to enable service discovery on podman
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
    volumes:
      # for debugging errors if any occur during running containers with podman compose refer to following:
      # https://blog.cthudson.com/2023-11-02-running-traefik-with-podman/
      # https://stackoverflow.com/questions/73814619/permission-denied-trying-to-use-rootless-podman-docker-compose-traefik-with
      # https://stackoverflow.com/questions/48957195/how-to-fix-docker-got-permission-denied-issue

      - ${PODMAN_SOCKET:-/var/run/docker.sock}:/var/run/docker.sock
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      # from the env var TRAEFIK_TAG
      - --providers.docker.constraints=Label(`traefik.constraint-label-stack`, `${TRAEFIK_TAG?Variable not set}`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Enable Docker Swarm mode (For production)
      - --providers.docker.swarmmode
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable the Dashboard and API
      - --api
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        # Enable Traefik for this service, to make it available in the public network
        - traefik.enable=true
        # Use the traefik-public network (declared below)
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        # Use the custom label "traefik.constraint-label=traefik-public"
        # This public Traefik will only use services with this label
        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
        # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.middlewares.${PROJECT_NAME?Variable not set}-https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.${PROJECT_NAME?Variable not set}-https-redirect.redirectscheme.permanent=true
        # Handle host with and without "www" to redirect to only one of them
        # Uses environment variable DOMAIN
        # To disable www redirection remove the Host() you want to discard, here and
        # below for HTTPS
        - traefik.http.routers.${PROJECT_NAME?Variable not set}-proxy-http.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${PROJECT_NAME?Variable not set}-proxy-http.entrypoints=http
        # traefik-https the actual router using HTTPS
        - traefik.http.routers.${PROJECT_NAME?Variable not set}-proxy-https.rule=Host(`${DOMAIN?Variable not set}`) || Host(`www.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${PROJECT_NAME?Variable not set}-proxy-https.entrypoints=https
        - traefik.http.routers.${PROJECT_NAME?Variable not set}-proxy-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.${PROJECT_NAME?Variable not set}-proxy-https.tls.certresolver=le
        # Define the port inside of the Docker service to use
        - traefik.http.services.${PROJECT_NAME?Variable not set}-proxy.loadbalancer.server.port=80
        # Handle domain with and without "www" to redirect to only one
        # To disable www redirection remove the next line
        - traefik.http.middlewares.${PROJECT_NAME?Variable not set}-www-redirect.redirectregex.regex=^https?://(www.)?(${DOMAIN?Variable not set})/(.*)
        # Redirect a domain with www to non-www
        # To disable it remove the next line
        - traefik.http.middlewares.${PROJECT_NAME?Variable not set}-www-redirect.redirectregex.replacement=https://${DOMAIN?Variable not set}/$${3}
        # Redirect a domain without www to www
        # To enable it remove the previous line and uncomment the next
        # - traefik.http.middlewares.${PROJECT_NAME}-www-redirect.redirectregex.replacement=https://www.${DOMAIN}/$${3}
        # Middleware to redirect www, to disable it remove the next line 
        - traefik.http.routers.${PROJECT_NAME?Variable not set}-proxy-https.middlewares=${PROJECT_NAME?Variable not set}-www-redirect
        # Middleware to redirect www, and redirect HTTP to HTTPS
        # to disable www redirection remove the section: ${PROJECT_NAME?Variable not set}-www-redirect,
        - traefik.http.routers.${PROJECT_NAME?Variable not set}-proxy-http.middlewares=${PROJECT_NAME?Variable not set}-www-redirect,${PROJECT_NAME?Variable not set}-https-redirect


  api:
    build: ./auth
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
    
    # TODO: implement docker secrets or something similar instead of environment variables to enhance security
    environment:
      - COOKIES__HTTPS_ONLY=${COOKIES__HTTPS_ONLY}


      - DB__CASSANDRA__HOSTS=${DB__CASSANDRA__HOSTS}
      - DB__CASSANDRA__KEYSPACE=${DB__CASSANDRA__KEYSPACE}
      - DB__CASSANDRA__PROTOCOL_VERSION=${DB__CASSANDRA__PROTOCOL_VERSION}
      - DB__SCHEMAS__UPDATE=${DB__SCHEMAS__UPDATE}


      - OIDC__EXP_TIME__ACCESS_TOKEN=${OIDC__EXP_TIME__ACCESS_TOKEN}
      - OIDC__EXP_TIME__AUTHCODE=${OIDC__EXP_TIME__AUTHCODE}
      - OIDC__EXP_TIME__ID_TOKEN=${OIDC__EXP_TIME__ID_TOKEN}
      - OIDC__EXP_TIME__REFRESH_TOKEN=${OIDC__EXP_TIME__REFRESH_TOKEN}

      - OIDC__JWE__ALGORITHMS__KEY_MANAGEMENT=${OIDC__JWE__ALGORITHMS__KEY_MANAGEMENT}
      - OIDC__JWE__ALGORITHMS__ENCRYPTION=${OIDC__JWE__ALGORITHMS__ENCRYPTION}
      - OIDC__JWE__SECRET_KEY=${OIDC__JWE__SECRET_KEY}

      - OIDC__JWT__SIGNING_ALGORITHM=${OIDC__JWT__SIGNING_ALGORITHM}
      - OIDC__JWT__KEYS__PRIVATE_KEY=${OIDC__JWT__KEYS__PRIVATE_KEY}
      - OIDC__JWT__KEYS__PUBLIC_KEY=${OIDC__JWT__KEYS__PUBLIC_KEY}


      - SAME_SITE__EXP_TIME__ACCESS_TOKEN=${SAME_SITE__EXP_TIME__ACCESS_TOKEN}
      - SAME_SITE__EXP_TIME__REFRESH_TOKEN=${SAME_SITE__EXP_TIME__REFRESH_TOKEN}

      - SAME_SITE__JWT__SIGNING_ALGORITHM=${SAME_SITE__JWT__SIGNING_ALGORITHM}
      - SAME_SITE__JWT__KEYS__PRIVATE_KEY=${SAME_SITE__JWT__KEYS__PRIVATE_KEY}
      - SAME_SITE__JWT__KEYS__PUBLIC_KEY=${SAME_SITE__JWT__KEYS__PUBLIC_KEY}


      - ISSUER=${ISSUER}
      - LOGIN_ENDPOINT=${LOGIN_ENDPOINT}
      - MAX_SECRET_SIZE_IN_BYTES=${MAX_SECRET_SIZE_IN_BYTES}

    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${PROJECT_NAME?Variable not set}-backend-http.rule=Host(`api.localhost`) || PathPrefix(`/openapi.json`) || PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
      - traefik.http.services.${PROJECT_NAME?Variable not set}-backend.loadbalancer.server.port=8000

  frontend:
    build: ./onekey
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
    
    labels:
      - traefik.enable=true
      - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
      - traefik.http.routers.${PROJECT_NAME?Variable not set}-frontend-http.rule=PathPrefix(`/`)
      - traefik.http.services.${PROJECT_NAME?Variable not set}-frontend.loadbalancer.server.port=3000


networks:
  traefik-public:
    # Allow setting it to false for testing
    external: true
